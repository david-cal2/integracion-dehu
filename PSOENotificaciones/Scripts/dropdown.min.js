function _extends() { _extends = Object.assign || function (b) { for (var h = 1; h < arguments.length; h++) { var g = arguments[h], f; for (f in g) Object.prototype.hasOwnProperty.call(g, f) && (b[f] = g[f]) } return b }; return _extends.apply(this, arguments) } function _defineProperties(b, h) { for (var g = 0; g < h.length; g++) { var f = h[g]; f.enumerable = f.enumerable || !1; f.configurable = !0; "value" in f && (f.writable = !0); Object.defineProperty(b, f.key, f) } }
function _createClass(b, h, g) { h && _defineProperties(b.prototype, h); g && _defineProperties(b, g); return b }
var Dropdown = function (b) {
    var h = b.fn.dropdown, g = RegExp("38|40|27"), f = { offset: 0, flip: !0, boundary: "scrollParent" }, r = { offset: "(number|string|function)", flip: "boolean", boundary: "(string|element)" }, l = function () {
        function e(a, c) { this._element = a; this._popper = null; this._config = this._getConfig(c); this._menu = this._getMenuElement(); this._inNavbar = this._detectNavbar(); this._addEventListeners() } var k = e.prototype; k.toggle = function () {
            if (!this._element.disabled && !b(this._element).hasClass("disabled")) {
                var a = e._getParentFromElement(this._element),
                c = b(this._menu).hasClass("show"); e._clearMenus(); if (!c) {
                    c = { relatedTarget: this._element }; var d = b.Event("show.bs.dropdown", c); b(a).trigger(d); if (!d.isDefaultPrevented()) {
                        if (!this._inNavbar) {
                            if ("undefined" === typeof Popper) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)"); d = this._element; b(a).hasClass("dropup") && (b(this._menu).hasClass("dropdown-menu-left") || b(this._menu).hasClass("dropdown-menu-right")) && (d = a); "scrollParent" !== this._config.boundary && b(a).addClass("position-static");
                            this._popper = new Popper(d, this._menu, this._getPopperConfig())
                        } if ("ontouchstart" in document.documentElement && 0 === b(a).closest(".navbar-nav").length) b("body").children().on("mouseover", null, b.noop); this._element.focus(); this._element.setAttribute("aria-expanded", !0); b(this._menu).toggleClass("show"); b(a).toggleClass("show").trigger(b.Event("shown.bs.dropdown", c))
                    }
                }
            }
        }; k.dispose = function () {
            b.removeData(this._element, "bs.dropdown"); b(this._element).off(".bs.dropdown"); this._menu = this._element = null; null !==
                this._popper && (this._popper.destroy(), this._popper = null)
        }; k.update = function () { this._inNavbar = this._detectNavbar(); null !== this._popper && this._popper.scheduleUpdate() }; k._addEventListeners = function () { var a = this; b(this._element).on("click.bs.dropdown", function (c) { c.preventDefault(); c.stopPropagation(); a.toggle() }) }; k._getConfig = function (a) { a = _extends({}, this.constructor.Default, b(this._element).data(), a); Util.typeCheckConfig("dropdown", a, this.constructor.DefaultType); return a }; k._getMenuElement = function () {
            if (!this._menu) {
                var a =
                    e._getParentFromElement(this._element); this._menu = b(a).find(".dropdown-menu")[0]
            } return this._menu
        }; k._getPlacement = function () { var a = b(this._element).parent(), c = "bottom-start"; a.hasClass("dropup") ? (c = "top-start", b(this._menu).hasClass("dropdown-menu-right") && (c = "top-end")) : a.hasClass("dropright") ? c = "right-start" : a.hasClass("dropleft") ? c = "left-start" : b(this._menu).hasClass("dropdown-menu-right") && (c = "bottom-end"); return c }; k._detectNavbar = function () { return 0 < b(this._element).closest(".navbar").length };
        k._getPopperConfig = function () { var a = this, c = {}; "function" === typeof this._config.offset ? c.fn = function (d) { d.offsets = _extends({}, d.offsets, a._config.offset(d.offsets) || {}); return d } : c.offset = this._config.offset; return { placement: this._getPlacement(), modifiers: { offset: c, flip: { enabled: this._config.flip }, preventOverflow: { boundariesElement: this._config.boundary } } } }; e._jQueryInterface = function (a) {
            return this.each(function () {
                var c = b(this).data("bs.dropdown"), d = "object" === typeof a ? a : null; c || (c = new e(this, d),
                    b(this).data("bs.dropdown", c)); if ("string" === typeof a) { if ("undefined" === typeof c[a]) throw new TypeError('No method named "' + a + '"'); c[a]() }
            })
        }; e._clearMenus = function (a) {
            if (!a || 3 !== a.which && ("keyup" !== a.type || 9 === a.which)) for (var c = b.makeArray(b('[data-toggle="dropdown"]')), d = 0; d < c.length; d++) {
                var m = e._getParentFromElement(c[d]), n = b(c[d]).data("bs.dropdown"), p = { relatedTarget: c[d] }; if (n && (n = n._menu, b(m).hasClass("show") && !(a && ("click" === a.type && /input|textarea/i.test(a.target.tagName) || "keyup" === a.type &&
                    9 === a.which) && b.contains(m, a.target)))) { var q = b.Event("hide.bs.dropdown", p); b(m).trigger(q); q.isDefaultPrevented() || ("ontouchstart" in document.documentElement && b("body").children().off("mouseover", null, b.noop), c[d].setAttribute("aria-expanded", "false"), b(n).removeClass("show"), b(m).removeClass("show").trigger(b.Event("hidden.bs.dropdown", p))) }
            }
        }; e._getParentFromElement = function (a) { var c, d = Util.getSelectorFromElement(a); d && (c = b(d)[0]); return c || a.parentNode }; e._dataApiKeydownHandler = function (a) {
            if (/input|textarea/i.test(a.target.tagName) ?
                !(32 === a.which || 27 !== a.which && (40 !== a.which && 38 !== a.which || b(a.target).closest(".dropdown-menu").length)) : g.test(a.which)) if (a.preventDefault(), a.stopPropagation(), !this.disabled && !b(this).hasClass("disabled")) {
                    var c = e._getParentFromElement(this), d = b(c).hasClass("show"); !d && (27 !== a.which || 32 !== a.which) || d && (27 === a.which || 32 === a.which) ? (27 === a.which && (a = b(c).find('[data-toggle="dropdown"]')[0], b(a).trigger("focus")), b(this).trigger("click")) : (c = b(c).find(".dropdown-menu .dropdown-item:not(.disabled)").get(),
                        0 !== c.length && (d = c.indexOf(a.target), 38 === a.which && 0 < d && d--, 40 === a.which && d < c.length - 1 && d++, 0 > d && (d = 0), c[d].focus()))
                }
        }; _createClass(e, null, [{ key: "VERSION", get: function () { return "4.0.0" } }, { key: "Default", get: function () { return f } }, { key: "DefaultType", get: function () { return r } }]); return e
    }(); b(document).on("keydown.bs.dropdown.data-api", '[data-toggle="dropdown"]', l._dataApiKeydownHandler).on("keydown.bs.dropdown.data-api", ".dropdown-menu", l._dataApiKeydownHandler).on("click.bs.dropdown.data-api keyup.bs.dropdown.data-api",
        l._clearMenus).on("click.bs.dropdown.data-api", '[data-toggle="dropdown"]', function (e) { e.preventDefault(); e.stopPropagation(); l._jQueryInterface.call(b(this), "toggle") }).on("click.bs.dropdown.data-api", ".dropdown form", function (e) { e.stopPropagation() }); b.fn.dropdown = l._jQueryInterface; b.fn.dropdown.Constructor = l; b.fn.dropdown.noConflict = function () { b.fn.dropdown = h; return l._jQueryInterface }; return l
}($, Popper);