var Util = function (c) {
    function l() { return { bindType: g.end, delegateType: g.end, handle: function (a) { if (c(a.target).is(this)) return a.handleObj.handler.apply(this, arguments) } } } var g = !1, f = {
        TRANSITION_END: "bsTransitionEnd", getUID: function (a) { do a += ~~(1E6 * Math.random()); while (document.getElementById(a)); return a }, getSelectorFromElement: function (a) {
            var b = a.getAttribute("data-target"); b && "#" !== b || (b = a.getAttribute("href") || ""); "#" === b.charAt(0) && (a = b, b = a = "function" === typeof c.escapeSelector ? c.escapeSelector(a).substr(1) :
                a.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1")); try { return 0 < c(document).find(b).length ? b : null } catch (d) { return null }
        }, reflow: function (a) { return a.offsetHeight }, triggerTransitionEnd: function (a) { c(a).trigger(g.end) }, supportsTransitionEnd: function () { return !!g }, isElement: function (a) { return (a[0] || a).nodeType }, typeCheckConfig: function (a, b, d) {
            for (var h in d) if (Object.prototype.hasOwnProperty.call(d, h)) {
                var k = d[h], e = b[h]; e = e && f.isElement(e) ? "element" : {}.toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase(); if (!(new RegExp(k)).test(e)) throw Error(a.toUpperCase() +
                    ': Option "' + (h + '" provided type "' + e + '" but expected type "') + (k + '".'));
            }
        }
    }; g = "undefined" !== typeof window && window.QUnit ? !1 : { end: "transitionend" }; c.fn.emulateTransitionEnd = function (a) { var b = this, d = !1; c(this).one(f.TRANSITION_END, function () { d = !0 }); setTimeout(function () { d || f.triggerTransitionEnd(b) }, a); return this }; f.supportsTransitionEnd() && (c.event.special[f.TRANSITION_END] = l()); return f
}($);